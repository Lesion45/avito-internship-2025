// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package repository is a generated GoMock package.
package repository

import (
	entity "avito-internship/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUser) AddUser(ctx context.Context, username string, password []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserMockRecorder) AddUser(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUser)(nil).AddUser), ctx, username, password)
}

// GetInfo mocks base method.
func (m *MockUser) GetInfo(ctx context.Context, username string) (int, []entity.Operation, []entity.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]entity.Operation)
	ret2, _ := ret[2].([]entity.Inventory)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockUserMockRecorder) GetInfo(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockUser)(nil).GetInfo), ctx, username)
}

// GetUserCredentials mocks base method.
func (m *MockUser) GetUserCredentials(ctx context.Context, username string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCredentials", ctx, username)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCredentials indicates an expected call of GetUserCredentials.
func (mr *MockUserMockRecorder) GetUserCredentials(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCredentials", reflect.TypeOf((*MockUser)(nil).GetUserCredentials), ctx, username)
}

// MockOperation is a mock of Operation interface.
type MockOperation struct {
	ctrl     *gomock.Controller
	recorder *MockOperationMockRecorder
}

// MockOperationMockRecorder is the mock recorder for MockOperation.
type MockOperationMockRecorder struct {
	mock *MockOperation
}

// NewMockOperation creates a new mock instance.
func NewMockOperation(ctrl *gomock.Controller) *MockOperation {
	mock := &MockOperation{ctrl: ctrl}
	mock.recorder = &MockOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperation) EXPECT() *MockOperationMockRecorder {
	return m.recorder
}

// SavePurchase mocks base method.
func (m *MockOperation) SavePurchase(ctx context.Context, username, product string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePurchase", ctx, username, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePurchase indicates an expected call of SavePurchase.
func (mr *MockOperationMockRecorder) SavePurchase(ctx, username, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePurchase", reflect.TypeOf((*MockOperation)(nil).SavePurchase), ctx, username, product)
}

// SaveTransfer mocks base method.
func (m *MockOperation) SaveTransfer(ctx context.Context, sender, recipient string, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTransfer", ctx, sender, recipient, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTransfer indicates an expected call of SaveTransfer.
func (mr *MockOperationMockRecorder) SaveTransfer(ctx, sender, recipient, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransfer", reflect.TypeOf((*MockOperation)(nil).SaveTransfer), ctx, sender, recipient, amount)
}
