// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Authorization mocks base method.
func (m *MockAuth) Authorization(ctx context.Context, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorization", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorization indicates an expected call of Authorization.
func (mr *MockAuthMockRecorder) Authorization(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorization", reflect.TypeOf((*MockAuth)(nil).Authorization), ctx, username, password)
}

// ValidateToken mocks base method.
func (m *MockAuth) ValidateToken(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthMockRecorder) ValidateToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuth)(nil).ValidateToken), token)
}

// generateToken mocks base method.
func (m *MockAuth) generateToken(username, op string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "generateToken", username, op)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// generateToken indicates an expected call of generateToken.
func (mr *MockAuthMockRecorder) generateToken(username, op interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "generateToken", reflect.TypeOf((*MockAuth)(nil).generateToken), username, op)
}

// handleUserNotFound mocks base method.
func (m *MockAuth) handleUserNotFound(ctx context.Context, username, password, op string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleUserNotFound", ctx, username, password, op)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// handleUserNotFound indicates an expected call of handleUserNotFound.
func (mr *MockAuthMockRecorder) handleUserNotFound(ctx, username, password, op interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleUserNotFound", reflect.TypeOf((*MockAuth)(nil).handleUserNotFound), ctx, username, password, op)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(ctx context.Context, input UserCreateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), ctx, input)
}

// RetrieveUserInfo mocks base method.
func (m *MockUser) RetrieveUserInfo(ctx context.Context, input RetrieveUserInfoInput) (RetrieveUserInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveUserInfo", ctx, input)
	ret0, _ := ret[0].(RetrieveUserInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveUserInfo indicates an expected call of RetrieveUserInfo.
func (mr *MockUserMockRecorder) RetrieveUserInfo(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveUserInfo", reflect.TypeOf((*MockUser)(nil).RetrieveUserInfo), ctx, input)
}

// MockOperation is a mock of Operation interface.
type MockOperation struct {
	ctrl     *gomock.Controller
	recorder *MockOperationMockRecorder
}

// MockOperationMockRecorder is the mock recorder for MockOperation.
type MockOperationMockRecorder struct {
	mock *MockOperation
}

// NewMockOperation creates a new mock instance.
func NewMockOperation(ctrl *gomock.Controller) *MockOperation {
	mock := &MockOperation{ctrl: ctrl}
	mock.recorder = &MockOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperation) EXPECT() *MockOperationMockRecorder {
	return m.recorder
}

// PurchaseProduct mocks base method.
func (m *MockOperation) PurchaseProduct(ctx context.Context, input PurchaseProductInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseProduct", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurchaseProduct indicates an expected call of PurchaseProduct.
func (mr *MockOperationMockRecorder) PurchaseProduct(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseProduct", reflect.TypeOf((*MockOperation)(nil).PurchaseProduct), ctx, input)
}

// TransferFunds mocks base method.
func (m *MockOperation) TransferFunds(ctx context.Context, input TransferFundsInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferFunds", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferFunds indicates an expected call of TransferFunds.
func (mr *MockOperationMockRecorder) TransferFunds(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferFunds", reflect.TypeOf((*MockOperation)(nil).TransferFunds), ctx, input)
}
